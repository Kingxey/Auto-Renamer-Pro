from datetime import datetime, timedelta
import os
import random
import asyncio
import sys
import time
import traceback
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, InputMediaPhoto
from pyrogram.errors import ChannelInvalid, ChannelPrivate, ChatAdminRequired, FloodWait, InputUserDeactivated, UserIsBlocked, PeerIdInvalid
from config import settings
from scripts import Txt
from helpers.utils import get_random_photo
from database.data import hyoshcoder
import logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
ADMIN_USER_ID = settings.ADMIN
is_restarting = False
from . import rename


ON = [[InlineKeyboardButton('m·¥áÃÅt·¥Ä·¥Ö·¥è…¥·¥á·¥ás ·¥Ä·¥Ñ·¥õ…™·¥†·¥áÃÅ·¥ás', callback_data='metadata_1'),
       InlineKeyboardButton('‚úÖ', callback_data='metadata_1')],
      [InlineKeyboardButton('D·¥áÃÅf…™…¥…™ Ä ·¥Ö·¥ás m·¥áÃÅt·¥Ä·¥Ö·¥è…¥·¥á·¥ás ·¥ò·¥á Äs·¥è…¥…¥·¥Ä ü…™s·¥áÃÅ·¥ás', callback_data='custom_metadata')]]

OFF = [[InlineKeyboardButton('m·¥áÃÅt·¥Ä·¥Ö·¥è…¥·¥á·¥ás ·¥Ö·¥áÃÅs·¥Ä·¥Ñ·¥õ…™·¥†·¥áÃÅ·¥ás', callback_data='metadata_0'),
        InlineKeyboardButton('‚ùå', callback_data='metadata_0')],
       [InlineKeyboardButton('D·¥áÃÅf…™…¥…™ Ä ·¥Ö·¥ás m·¥áÃÅt·¥Ä·¥Ö·¥è…¥·¥á·¥ás ·¥ò·¥á Äs·¥è…¥…¥·¥Ä ü…™s·¥áÃÅ·¥ás', callback_data='custom_metadata')]]


@Client.on_message(filters.private & filters.command(["start", 
                                                      "autorename", 
                                                      "setmedia", 
                                                      "set_caption", 
                                                      "del_caption", 
                                                      "see_caption", 
                                                      "view_caption", 
                                                      "viewthumb", 
                                                      "view_thumb", 
                                                      "del_thumb", 
                                                      "delthumb", 
                                                      "metadata", 
                                                      "donate",
                                                      "premium",
                                                      "plan",
                                                      "bought",
                                                      "help",
                                                      "set_dump",
                                                      "view_dump",
                                                      "viewdump",
                                                      "del_dump",
                                                      "deldump",
                                                      "profile",
                                                      "s_allfile",
                                                      "cancel"
                                                      ]))
async def command(client, message: Message):
    user_id = message.from_user.id
    img = await get_random_photo()  
    if message.text.startswith('/'):
        command = message.text.split(' ')[0][1:]  
        cmd, args = message.command[0], message.command[1:]
        try:
            if command == 'start':
                user = message.from_user
                await hyoshcoder.add_user(client, message)
                m = await message.reply_sticker("CAACAgIAAxkBAALmzGXSSt3ppnOsSl_spnAP8wHC26jpAAJEGQACCOHZSVKp6_XqghKoHgQ")
                await asyncio.sleep(3)
                await m.delete()  

                buttons = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ä¢ ·¥ç·¥ás ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö·¥ás ‚Ä¢", callback_data='help')],
                    [InlineKeyboardButton('‚Ä¢ ·¥ç…™s·¥ás √† ·¥ä·¥è·¥ú Ä', url='https://t.me/hyoshassistantbot'),
                     InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/tout_manga_confondu')],
                    [InlineKeyboardButton('‚Ä¢ ·¥Ä ·¥ò Ä·¥è·¥ò·¥ès', callback_data='about'),
                     InlineKeyboardButton('s·¥è·¥ú Ä·¥Ñ·¥á ‚Ä¢', callback_data='source')]
                ])
                
                if args and args[0].startswith("refer_"):
                    referrer_id = int(args[0].replace("refer_", "")) 
                    point_map = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
                    reward = random.choice(point_map)
                    ref = await hyoshcoder.is_refferer(user_id)
                    if ref :
                        if img:
                            await message.reply_photo(photo=img, caption=caption, reply_markup=buttons)
                        else:
                            await message.reply_text(text=caption, reply_markup=buttons)
                        return
                    if referrer_id != user_id:
                        referrer = await hyoshcoder.read_user(referrer_id)
                        
                        if referrer:
                            await hyoshcoder.set_referrer(user_id, referrer_id)
                            await hyoshcoder.add_points(referrer_id, reward)
                            cap = f"üéâ {message.from_user.mention} a rejoint le bot gr√¢ce √† votre invitation ! Vous avez re√ßu {reward} points."
                            await client.send_message(
                                chat_id = referrer_id,
                                text = cap
                            )
                        else:
                            await message.reply("‚ùå L'utilisateur qui vous a invit√© n'existe pas.")

                caption = Txt.START_TXT.format(user.mention)

                if img:
                    await message.reply_photo(photo=img, caption=caption, reply_markup=buttons)
                else:
                    await message.reply_text(text=caption, reply_markup=buttons)
                
                if args and args[0].startswith("adds_"):
                    unique_code = args[0].replace("adds_", "")  
                    user = await hyoshcoder.get_user_by_code(unique_code)
                    reward = await hyoshcoder.get_expend_points(user["_id"])

                    if not user:
                        await message.reply("‚ùå le lien n'est pas valide ou l'avez d√©j√† utilis√©.")
                        return

                    await hyoshcoder.add_points(user["_id"], reward)
                    await hyoshcoder.set_expend_points(user["_id"], 0, None)
                    cap = f"üéâ Vous avez gagn√© {reward} points !"
                    await client.send_message(
                        chat_id = user["_id"],
                        text = cap
                    )

            elif command == "autorename":
                command_parts = message.text.split("/autorename", 1)
                if len(command_parts) < 2 or not command_parts[1].strip():
                    caption = (
                        "**V·¥á·¥ú…™ ü ü·¥á·¥¢ ·¥ò Ä·¥è·¥†…™·¥Ö·¥á Ä ·¥ú…¥ …¥·¥è·¥ú·¥†·¥á·¥Ä·¥ú …¥·¥è·¥ç ·¥Ä·¥ò Ä√®s  ü·¥Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö·¥á /·¥Ä·¥ú·¥õ·¥è Ä·¥á…¥·¥Ä·¥ç·¥á**\n\n"
                        "Pour ·¥Ñ·¥è·¥ç·¥ç·¥á…¥·¥Ñ·¥á Ä  ü'·¥ú·¥õ…™ ü…™s·¥Ä·¥õ…™·¥è…¥ :\n"
                        "**F·¥è Ä·¥ç·¥Ä·¥õ ·¥Ö'·¥áx·¥Ä·¥ç·¥ò ü·¥á :** `·¥ç·¥è…¥S·¥ú·¥ò·¥á ÄV…™·¥Ö·¥á·¥è [saison] [episode] [quality]`"
                    )
                    await message.reply_text(caption)
                    return

                format_template = command_parts[1].strip()
                await hyoshcoder.set_format_template(user_id, format_template)
                caption = (
                    f"**üåü F·¥Ä…¥·¥õ·¥Äs·¥õ…™q·¥ú·¥á! V·¥è·¥ús √™·¥õ·¥ás ·¥ò Ä√™·¥õ ·¥Ä  Ä·¥á…¥·¥è·¥ç·¥ç·¥á Ä ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™q·¥ú·¥á·¥ç·¥á…¥·¥õ v·¥è·¥õ Ä·¥ás Íú∞…™ ü·¥ás.**\n\n"
                    "üì© I ü v·¥è·¥ús s·¥úÍú∞Íú∞…™·¥õ d'·¥á…¥·¥†·¥è è·¥á Ä  ü·¥ás Íú∞…™ ü·¥ás q·¥ú·¥á v·¥è·¥ús s·¥è·¥ú ú·¥Ä…™·¥õ·¥á·¥¢  Ä·¥á…¥·¥è·¥ç·¥ç·¥á Ä.\n\n"
                    f"**V·¥è·¥õ Ä·¥á m·¥è·¥Ö√® ü·¥á ·¥á…¥ Ä·¥á…¢…™s·¥õ Ä√© :** `{format_template}`\n\n"
                    "Rappelez-vous, je vais peut-√™tre renommer vos fichiers lentement mais je les rendrai s√ªrement parfaits!‚ú®"
                )
                if img:
                    await message.reply_photo(photo=img, caption=caption)
                else:
                    await message.reply_text(text=caption)

            elif command == "setmedia":
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìÅ ·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ", callback_data="setmedia_document")],
                    [InlineKeyboardButton("üé• ·¥†…™·¥Ö·¥á·¥è", callback_data="setmedia_video")]
                ])
                caption = (
                    "**V·¥á·¥ú…™ ü ü·¥á·¥¢ s·¥á ü·¥á·¥Ñ·¥õ…™·¥è…¥…¥·¥á Ä  ü·¥á ·¥õ è·¥ò·¥á ·¥Ö·¥á ·¥ç√©·¥Ö…™·¥Ä q·¥ú·¥á v·¥è·¥ús s·¥è·¥ú ú·¥Ä…™·¥õ·¥á·¥¢ ·¥Ö√©“ì…™…¥…™ Ä :**"
                )
                if img:
                    await message.reply_photo(photo=img, caption=caption, reply_markup=keyboard)
                else:
                    await message.reply_text(text=caption, reply_markup=keyboard)

            elif command == "set_caption":
                if len(message.command) == 1:
                    caption = (
                        "**D·¥è…¥…¥·¥á·¥¢  ü·¥Ä  ü·¥áÃÅ…¢·¥á…¥·¥Ö·¥á\n\nEùìç·¥Ä·¥ç·¥ò ü·¥á : `/set_caption üìïN·¥è·¥ç ‚û† : {filename} \n\nüîó T·¥Ä…™ ü ü·¥á ‚û† : {filesize} \n\n‚è∞ D·¥ú Ä·¥áÃÅ·¥á ‚û† : {duration}`**"
                    )
                    await message.reply_text(caption)
                    return
                new_caption = message.text.split(" ", 1)[1]
                await hyoshcoder.set_caption(message.from_user.id, caption=new_caption)
                caption = ("**V·¥è·¥õ Ä·¥á  ü·¥áÃÅ…¢·¥á…¥·¥Ö·¥á ·¥Ä ·¥á·¥õ·¥á ·¥ánregistr·¥ár ·¥Ä·¥†·¥á·¥Ñ s·¥ú·¥Ñ·¥Ñ·¥áÃÄs ‚úÖ**")
                if img:
                    await message.reply_photo(photo=img, caption=caption)
                else:
                    await message.reply_text(text=caption)

            elif command == "del_caption":
                old_caption = await hyoshcoder.get_caption(message.from_user.id)
                if not old_caption:
                    caption = ("**V·¥è·¥ús n'·¥Ä·¥†·¥á·¥¢ ·¥Ä·¥ú·¥Ñ·¥ú·¥ç·¥á  ü·¥áÃÅ…¢·¥á…¥·¥Ö·¥á ‚ùå**")
                    await message.reply_text(caption)
                    return
                await hyoshcoder.set_caption(message.from_user.id, caption=None)
                caption = ("**V·¥è·¥õ Ä·¥á  ü·¥áÃÅ…¢·¥á…¥·¥Ö·¥á ·¥Ä ·¥á·¥õ·¥á s·¥ú·¥ò·¥ò Ä…™·¥ç·¥áÃÅ·¥á ·¥Ä·¥†·¥á·¥Ñ s·¥ú·¥Ñ·¥Ñ·¥áÃÄs üóëÔ∏è**")
                if img:
                    await message.reply_photo(photo=img, caption=caption)
                else:
                    await message.reply_text(text=caption)

            elif command in ['see_caption', 'view_caption']:
                old_caption = await hyoshcoder.get_caption(message.from_user.id)
                if old_caption:
                    caption = (f"**V·¥è·¥õ Ä·¥á  ü·¥áÃÅ…¢·¥á…¥·¥Ö·¥á :**\n\n`{old_caption}`")
                else:
                    caption = ("**V·¥è·¥ús n'·¥Ä·¥†·¥á·¥¢ ·¥Ä·¥ú·¥Ñ·¥ú·¥ç·¥á  ü·¥áÃÅ…¢·¥á…¥·¥Ö·¥á ‚ùå**")
                if img:
                    await message.reply_photo(photo=img, caption=caption)
                else:
                    await message.reply_text(text=caption)

            elif command in ['view_thumb', 'viewthumb']:
                thumb = await hyoshcoder.get_thumbnail(message.from_user.id)
                if thumb:
                    await client.send_photo(chat_id=message.chat.id, photo=thumb)
                else:
                    caption = ("**V·¥è·¥ús n'·¥Ä·¥†·¥á·¥¢ ·¥Ä·¥ú·¥Ñ·¥ú·¥ç·¥á ·¥ç…™…¥…™·¥Ä·¥õ·¥ú Ä·¥á ‚ùå**")
                    if img:
                        await message.reply_photo(photo=img, caption=caption)
                    else:
                        await message.reply_text(text=caption)

            elif command in ['del_thumb', 'delthumb']:
                old_thumb = await hyoshcoder.get_thumbnail(user_id)
                if not old_thumb:
                    caption = (
                        "Aucune miniature n'est actuellement definis."
                    )
                    await message.reply_photo(photo=img, caption=caption)
                    return
                
                await hyoshcoder.set_thumbnail(message.from_user.id, file_id=None)
                caption = ("**·¥ç…™…¥…™·¥Ä·¥õ·¥ú Ä·¥á s·¥ú·¥ò·¥ò Ä…™·¥ç·¥áÃÅ·¥á ·¥Ä·¥†·¥á·¥Ñ s·¥ú·¥Ñ·¥Ñ·¥áÃÄs üóëÔ∏è**")
                if img:
                    await message.reply_photo(photo=img, caption=caption)
                else:
                    await message.reply_text(text=caption)
            
            elif command == "metadata":
                ms = await message.reply_text("**V·¥á·¥ú…™ ü ü·¥á·¥¢ ·¥ò·¥Ä·¥õ…™·¥á…¥·¥õ·¥á Ä...**", reply_to_message_id=message.id)
                bool_metadata = await hyoshcoder.get_metadata(message.from_user.id)
                user_metadata = await hyoshcoder.get_metadata_code(message.from_user.id)
                await ms.delete()
                if bool_metadata:
                    await message.reply_text(
                        f"<b>V·¥è·¥õ Ä·¥ás m·¥áÃÅt·¥Ä·¥Ö·¥è…¥·¥á·¥ás ·¥Ä·¥Ñ·¥õ·¥ú·¥á ü ü·¥ás :</b>\n\n‚ûú {user_metadata} ",
                        reply_markup=InlineKeyboardMarkup(ON),
                    )
                else:
                    await message.reply_text(
                        f"<b>V·¥è·¥õ Ä·¥ás m·¥áÃÅt·¥Ä·¥Ö·¥è…¥·¥á·¥ás ·¥Ä·¥Ñ·¥õ·¥ú·¥á ü ü·¥ás :</b>\n\n‚ûú {user_metadata} ",
                        reply_markup=InlineKeyboardMarkup(OFF),
                    )
            
            elif command == "donate":
                buttons = InlineKeyboardMarkup([
                    [InlineKeyboardButton(text=" Ä·¥á·¥õ·¥è·¥ú Ä", callback_data="help"), InlineKeyboardButton(text="·¥ò Ä·¥è·¥ò Ä…™·¥á·¥õ·¥Ä…™ Ä·¥á", url='https://t.me/hyoshassistantBot')]
                ])
                caption=Txt.DONATE_TXT
                
                if img:
                    yt = await message.reply_photo(photo=img, caption=caption, reply_markup=buttons)
                else:
                    yt = await message.reply_text(text=caption, reply_markup=buttons)
            
                await asyncio.sleep(300)
                await yt.delete()
                await message.delete()
            
            elif command == "premium":
                buttons = InlineKeyboardMarkup([
                    [InlineKeyboardButton("·¥ò Ä·¥è·¥ò Ä…™·¥á·¥õ·¥Ä…™ Ä·¥á", url="https://t.me/hyoshassistantBot"), InlineKeyboardButton("“ì·¥á Ä·¥ç·¥á Ä", callback_data="close")]
                ])
                caption=Txt.PREMIUM_TXT
                if img:
                    yt = await message.reply_photo(photo=img, caption=caption, reply_markup=buttons)
                else:
                    yt = await message.reply_text(text=caption, reply_markup=buttons)
            
                await asyncio.sleep(300)
                await yt.delete()
                await message.delete()
            
            elif command == "plan":
                buttons = InlineKeyboardMarkup([
                    [InlineKeyboardButton("·¥ò·¥Ä è·¥á Ä ·¥†·¥è·¥õ Ä·¥á ·¥Ä ô·¥è…¥…¥·¥á·¥ç·¥á…¥·¥õ", url="https://t.me/hyoshassistantBot"), InlineKeyboardButton("“ì·¥á Ä·¥ç·¥á Ä", callback_data="close")]
                ])
                caption=Txt.PREPLANS_TXT
                if img:
                    yt = await message.reply_photo(photo=img, caption=caption, reply_markup=buttons)
                else:
                    yt = await message.reply_text(text=caption, reply_markup=buttons)
            
                await asyncio.sleep(300)
                await yt.delete()
                await message.delete()
                
            elif command == "bought":
                msg = await message.reply('·¥Ä·¥õ·¥õ·¥á…¥·¥Ö, ·¥ä·¥á ·¥†·¥á Ä…™“ì…™·¥á...')
                replied = message.reply_to_message

                if not replied:
                    await msg.edit("<b>·¥†·¥á·¥ú…™ ü ü·¥á·¥¢  Ä·¥á·¥ò·¥è…¥·¥Ö Ä·¥á ·¥Ä·¥†·¥á·¥Ñ  ü·¥Ä ·¥Ñ·¥Ä·¥ò·¥õ·¥ú Ä·¥á ·¥Ö'·¥áÃÅcran ·¥Ö·¥á ·¥†·¥è·¥õ Ä·¥á ·¥ò·¥Ä è·¥á·¥ç·¥á…¥·¥õ ·¥ò·¥è·¥ú Ä  ü'·¥Ä·¥Ñ ú·¥Ä·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò·¥è·¥ú Ä ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á Ä.\n\n·¥ò·¥Ä Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á, ·¥õ·¥áÃÅ ü·¥á·¥Ñ ú·¥Ä Ä…¢·¥á·¥¢ ·¥Ö'·¥Ä ô·¥è Ä·¥Ö ·¥†·¥è·¥õ Ä·¥á ·¥Ñ·¥Ä·¥ò·¥õ·¥ú Ä·¥á ·¥Ö'·¥áÃÅcran, ·¥ò·¥ú…™s  Ä·¥á·¥ò·¥è…¥·¥Ö Ä·¥á ·¥Ä·¥†·¥á·¥Ñ  ü·¥Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö·¥á '/bought</b>")
                elif replied.photo:
                    await client.send_photo(
                        chat_id=settings.LOG_CHANNEL,
                        photo=replied.photo.file_id,
                        caption=f'<b>·¥ú·¥õ…™ ü…™s·¥Ä·¥õ·¥á·¥ú Ä - {message.from_user.mention}\n…™·¥Ö ·¥ú·¥õ…™ ü…™s·¥Ä·¥õ·¥á·¥ú Ä - <code>{message.from_user.id}</code>\n…¥·¥è·¥ç ·¥ú·¥õ…™ ü…™s·¥Ä·¥õ·¥á·¥ú Ä - <code>{message.from_user.username}</code>\n·¥ò Ä·¥á…¥·¥è·¥ç - <code>{message.from_user.first_name}</code></b>',
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("Close", callback_data="close_data")]
                        ])
                    )
                    await msg.edit_text('<b>V·¥è·¥õ Ä·¥á ·¥Ñ·¥Ä·¥ò·¥õ·¥ú Ä·¥á ·¥Ö\'·¥áÃÅ·¥õ·¥è…™ ü·¥á ·¥Ä ·¥á·¥õ·¥á ·¥á…¥·¥†·¥è è·¥áÃÅ·¥á ·¥Ä·¥úx ·¥Ä·¥Ö·¥ç…™…¥s</b>')
            
            elif command == "help":
                bot = await client.get_me()
                mention = bot.mention
                caption = Txt.HELP_TXT.format(mention=mention) 
                secantial_statut = await hyoshcoder.get_sequential_mode(user_id)
                src_info = await hyoshcoder.get_src_info(user_id)  
                if secantial_statut:
                    btn_sec_text = "Secantiel ‚úÖ"
                else:
                    btn_sec_text = "Secantiel ‚ùå"
                
                if src_info == "file_name":
                    src_txt = "Nom du fichier"
                else:
                    src_txt = "Caption du fichier"
                buttons = InlineKeyboardMarkup([
                                [InlineKeyboardButton("‚Ä¢ “ì·¥è Ä·¥ç·¥Ä·¥õ ·¥Ö·¥á  Ä·¥á…¥·¥è·¥ç·¥ç·¥Ä…¢·¥á ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™«´·¥ú·¥á ‚Ä¢", callback_data='file_names')],
                                [InlineKeyboardButton('‚Ä¢ ·¥†…™…¢…¥·¥á·¥õ·¥õ·¥á', callback_data='thumbnail'), InlineKeyboardButton(' ü·¥áÃÅ…¢·¥á…¥·¥Ö·¥á ‚Ä¢', callback_data='caption')],
                                [InlineKeyboardButton('‚Ä¢ ·¥ç·¥á·¥õ·¥Ä·¥Ö·¥è…¥…¥·¥áÃÅ·¥ás', callback_data='meta'), InlineKeyboardButton('“ì·¥Ä…™ Ä·¥á ·¥ú…¥ ·¥Ö·¥è…¥ ‚Ä¢', callback_data='donate')],
                                [InlineKeyboardButton(f'‚Ä¢ {btn_sec_text}', callback_data='secanciel'), InlineKeyboardButton('·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢', callback_data='premiumx')],
                                [InlineKeyboardButton(f'‚Ä¢ Extraire depuis : {src_txt}', callback_data='toogle_src')],
                                [InlineKeyboardButton('‚Ä¢ ·¥Ä·¥Ñ·¥Ñ·¥ú·¥á…™ ü', callback_data='home')]
                            ])
                caption =Txt.HELP_TXT.format(client.mention)
                if img:
                    await message.reply_photo(photo=img, caption=caption, reply_markup=buttons)
                else:
                    await message.reply_text(text=caption, disable_web_page_preview=True, reply_markup=buttons)
            
            elif command == "set_dump":
                if len(message.command) == 1:
                    caption = "Veuillez entrer l'ID du channel √† dumper apr√®s la commande.\nEx : `/set_dump -1001234567890`"
                    await message.reply_text(caption)
                else:
                    channel_id = message.command[1]  

                    if not channel_id:  
                        await message.reply_text("Veuillez entrer un ID de channel valide.\nEx : `/set_dump -1001234567890`")
                    else:
                        try:
                            channel_info = await client.get_chat(channel_id)
                            if channel_info:
                                await hyoshcoder.set_user_channel(message.from_user.id, channel_id)
                                await message.reply_text(f"Le channel {channel_id} a √©t√© definis comme channel de dump.")
                            else:
                                await message.reply_text("Le channel sp√©cifi√© n'existe pas ou n'est pas accessible.\nAssurez-vous que je suis admin du channel.")
                        except Exception as e:
                            await message.reply_text(f"Erreur : {e}. Veuillez entrer un ID de channel valide.\nEx : `/set_dump -1001234567890`")
            
            elif command in ["view_dump", "viewdump"]:
                channel_id = await hyoshcoder.get_user_channel(message.from_user.id)
                if channel_id:
                    caption = f"Le channel {channel_id} est actuellement configur√© comme channel de dump."
                    await message.reply_text(caption)
                else:
                    caption = "Aucun channel configur√© pour le moment."
                    await message.reply_text(caption)

            elif command in ["del_dump", "deldump"]:
                channel_id = await hyoshcoder.get_user_channel(message.from_user.id)
                if channel_id:
                    await hyoshcoder.set_user_channel(message.from_user.id, None)
                    caption = f"Le channel {channel_id} a √©t√© supprim√© de la liste des channels de dump."
                    await message.reply_text(caption)
                else:
                    caption = "Aucun channel configur√© pour le moment."
                    await message.reply_text(caption)
            
            elif command == "profile":
                user = await hyoshcoder.read_user(message.from_user.id)
                caption = f"Username: {message.from_user.username}\n"
                caption += f"First Name: {message.from_user.first_name}\n"
                caption += f"Last Name: {message.from_user.last_name}\n"
                caption += f"User ID: {message.from_user.id}\n"
                caption +=f"Points: {user['points']}\n"
                
                await message.reply_photo(img, caption=caption)
        
            elif command =="cancel":
                user_id = message.from_user.id

                if user_id in rename.secantial_operations:
                    for file_info in rename.secantial_operations[user_id]["files"]:
                        file_path = f"downloads/{file_info['file_name']}"
                        metadata_file_path = f"Metadata/{file_info['file_name']}"
                        
                        if os.path.exists(file_path):
                            os.remove(file_path)
                        if os.path.exists(metadata_file_path):
                            os.remove(metadata_file_path)

                    del rename.secantial_operations[user_id]
                    await message.reply_text("‚úÖ Toutes les op√©rations en cours ont √©t√© annul√©es.")
                else:
                    await message.reply_text("‚ùå Aucune op√©ration en cours √† annuler.")

                if user_id in rename.user_semaphores:
                    rename.user_semaphores[user_id].release()

                if user_id in rename.user_queue_messages:
                    for queue_message in rename.user_queue_messages[user_id]:
                        await queue_message.edit_text("‚ùå Op√©ration annul√©e par l'utilisateur.")
                    del rename.user_queue_messages[user_id]
                    
                    
        except FloodWait as e:
            print(f"FloodWait: {e}")
            await asyncio.sleep(e.value)  
        except Exception as e:
            print(f"Erreur inattendue : {e}")
            await message.reply_text(f"Une erreur s'est produite. Veuillez r√©essayer plus tard. {e}")

@Client.on_message(filters.private & filters.photo)
async def addthumbs(client, message):
    mkn = await message.reply_text("V·¥á·¥ú…™ ü ü·¥á·¥¢ ·¥ò·¥Ä·¥õ…™·¥á…¥·¥õ·¥á Ä ...")
    await hyoshcoder.set_thumbnail(message.from_user.id, file_id=message.photo.file_id)                
    await mkn.edit("**·¥ç…™…¥…™·¥Ä·¥õ·¥ú Ä·¥á ·¥á…¥ Ä·¥á…¢…™s·¥õ Ä·¥áÃÅ·¥á ·¥Ä·¥†·¥á·¥Ñ s·¥ú·¥Ñ·¥Ñ·¥áÃÄs ‚úÖÔ∏è**")

